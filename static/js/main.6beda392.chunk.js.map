{"version":3,"sources":["constants/constants.js","redux/reducers.js","redux/store.js","components/WeatherPage.js","components/IntroPage.js","redux/actions.js","App.js","index.js"],"names":["API_KEY","GET_DATA","initState","reducer","state","arguments","length","undefined","action","type","Object","assign","lat","lon","temp","name","weather","store","createStore","reducers","applyMiddleware","thunk","ConnectWeatherPage","react_default","a","createElement","id","className","this","props","React","Component","WeatherPage","connect","ConnectIntroPage","alert","handleLocate","_this","setState","getData","onClick","IntroPage","dispatch","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","$","get","concat","then","res","Number","toFixed","data","main","ConnectApp","components_WeatherPage","components_IntroPage","App","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"0OACaA,EAAU,mCAGVC,EAAW,WCFlBC,EAAY,GAkBHC,MAhBf,WAA4C,IAA3BC,EAA2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnBH,EAAWM,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxC,OAAQC,EAAOC,MACX,KAAKR,EACD,OAAOS,OAAOC,OAAO,GAAIP,EAAO,CAC5BQ,IAAKJ,EAAOI,IACZC,IAAKL,EAAOK,IACZC,KAAMN,EAAOM,KACbC,KAAMP,EAAOO,KACbC,QAASR,EAAOQ,UAGxB,QACI,OAAOZ,ICNJa,EALDC,YACVC,EACAC,YAAgBC,yCCHdC,0LAGE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACJH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAf,aAAiCC,KAAKC,MAAMjB,KAC5CW,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAf,cAAkCC,KAAKC,MAAMhB,KAC7CU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAf,aAAiCC,KAAKC,MAAMd,MAC5CQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAf,YAAgCC,KAAKC,MAAMb,SAC3CO,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAf,gBAAoCC,KAAKC,MAAMf,KAA/C,aATiBgB,IAAMC,YA2BxBC,EAFKC,YAVI,SAAC7B,GACrB,MAAO,CACHQ,IAAKR,EAAMQ,IACXC,IAAKT,EAAMS,IACXC,KAAMV,EAAMU,KACZC,KAAMX,EAAMW,KACZC,QAASZ,EAAMY,UAIHiB,CAA0BX,8BCxBxCY,6MAGF9B,MAAQ,CACJ+B,OAAO,KAGXC,aAAe,WACXC,EAAKC,SAAS,CAAEH,OAAQE,EAAKjC,MAAM+B,QACnCE,EAAKR,MAAMU,mFAIX,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACJH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,SAASc,QAASZ,KAAKQ,cAAlC,mBACAb,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACFE,KAAKxB,MAAM+B,MACP,2FACA,2DAnBKL,IAAMC,WAmCtBU,EAFGR,YAAQ,KANC,SAACS,GACxB,MAAO,CACHH,QAAS,kBAAMG,EC7BZ,SAASA,GACZ,OACIC,UAAUC,YAAYC,mBAClB,SAASC,GACL,IAAIlC,EAAMkC,EAAIC,OAAOC,SACjBnC,EAAMiC,EAAIC,OAAOE,UACrBC,IAAEC,IAAF,uDAAAC,OAA6DxC,EAA7D,SAAAwC,OAAwEvC,EAAxE,WAAAuC,OAAqFpD,EAArF,oBACCqD,KAAK,SAACC,GACHZ,EAAS,CAAEjC,KAAMR,EACbW,IAAK2C,OAAO3C,EAAI4C,QAAQ,IACxB3C,IAAK0C,OAAO1C,EAAI2C,QAAQ,IACxB1C,KAAMwC,EAAIG,KAAKC,KAAK5C,KACpBC,KAAMuC,EAAIG,KAAK1C,KACfC,QAASsC,EAAIG,KAAKzC,QAAQ,GAAG0C,gBDoBvCzB,CAAmCC,GEjC/CyB,mLAGF,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACJE,KAAKC,MAAMb,QACTO,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,cAPa9B,aAsBV+B,EAFH7B,YALY,SAAC7B,GACvB,MAAO,CAAEY,QAASZ,EAAMY,UAIdiB,CAA0B0B,GCnBtCI,IAASC,OACLzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAUhD,MAAOA,GAAOM,EAAAC,EAAAC,cAACyC,EAAD,OAAoBC,SAASC,eAAe","file":"static/js/main.6beda392.chunk.js","sourcesContent":["// free api key from OpenWeatherMap \r\nexport const API_KEY = '546ba1f0f55cbd23dfb475edd7960340';\r\n\r\n// action constants\r\nexport const GET_DATA = 'GET_DATA';","import { GET_DATA} from '../constants/constants';\r\n\r\nconst initState = {};\r\n\r\nfunction reducer(state = initState, action) {\r\n    switch (action.type) {\r\n        case GET_DATA:\r\n            return Object.assign({}, state, {\r\n                lat: action.lat,\r\n                lon: action.lon,\r\n                temp: action.temp,\r\n                name: action.name,\r\n                weather: action.weather\r\n            });\r\n\r\n        default: \r\n            return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import { createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\n// create redux store and apply middleware\r\nconst store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './WeatherPage.css';\r\n\r\nclass ConnectWeatherPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id='page--weather'>\r\n                <div className='slot'>Latitude: {this.props.lat}</div>\r\n                <div className='slot'>Longitude: {this.props.lon}</div>\r\n                <div className='slot'>Location: {this.props.name}</div>\r\n                <div className='slot'>Weather: {this.props.weather}</div>\r\n                <div className='slot'>Temperature: {this.props.temp}F</div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        lat: state.lat,\r\n        lon: state.lon,\r\n        temp: state.temp,\r\n        name: state.name,\r\n        weather: state.weather\r\n    };\r\n};\r\n\r\nconst WeatherPage = connect(mapStateToProps) (ConnectWeatherPage);\r\n\r\nexport default WeatherPage;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getData } from '../redux/actions';\r\nimport './IntroPage.css';\r\n\r\nclass ConnectIntroPage extends React.Component {\r\n\r\n    // local state to show alert message\r\n    state = {\r\n        alert: false\r\n    }\r\n\r\n    handleLocate = () => {\r\n        this.setState({ alert: !this.state.alert });\r\n        this.props.getData();\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div id='page--intro'>\r\n                <button id='button' onClick={this.handleLocate}>Current Weather</button>\r\n                <div id='alert'>\r\n                    { this.state.alert\r\n                        ? 'If the browser prompt appears, please allow permission for location for weather analysis'\r\n                        : 'Please click the button to request weather data'\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getData: () => dispatch(getData())\r\n    };\r\n};\r\n\r\nconst IntroPage = connect(null, mapDispatchToProps) (ConnectIntroPage);\r\n\r\nexport default IntroPage;","import $ from 'axios';\r\nimport { API_KEY, GET_DATA } from '../constants/constants';\r\n\r\n// retrieve client location using GeoLocation API, then request weather information from OpenWeatherMap API\r\nexport function getData() {\r\n    return function(dispatch) {\r\n        return (\r\n            navigator.geolocation.getCurrentPosition(\r\n                function(pos) {\r\n                    let lat = pos.coords.latitude;\r\n                    let lon = pos.coords.longitude;\r\n                    $.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${API_KEY}&units=imperial`)\r\n                    .then((res) => {\r\n                        dispatch({ type: GET_DATA, \r\n                            lat: Number(lat.toFixed(2)),\r\n                            lon: Number(lon.toFixed(2)),\r\n                            temp: res.data.main.temp,\r\n                            name: res.data.name,\r\n                            weather: res.data.weather[0].main\r\n                        });\r\n                    });\r\n                }\r\n            )\r\n        ); \r\n    };\r\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport WeatherPage from './components/WeatherPage';\nimport IntroPage from './components/IntroPage';\n\nclass ConnectApp extends Component {\n  \n  render() {\n    return (\n      <div id=\"page\">\n        { this.props.weather\n          ? <WeatherPage />\n          : <IntroPage />\n        }\n      </div>\n    );\n  };\n};\n\n// access redux store\nconst mapStateToProps = (state) => {\n  return { weather: state.weather };\n};\n\n// connect to redux\nconst App = connect(mapStateToProps) (ConnectApp);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\n);"],"sourceRoot":""}